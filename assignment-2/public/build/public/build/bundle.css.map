{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { scaleLinear } from \"d3-scale\";\n  import { dataDashedL, dataRegularL } from \"./data.js\";\n  import CircleElement from \"./CircleElement.svelte\";\n\n  let activeIndex = -1;\n  let numHCells = 20;\n  let numVCells = 10;\n  let xPositionFirstIntGrid = 175;\n  let offsetGridCell = 13;\n  let xPixelsBetweenCells = 24;\n  let yPixelsBetweenCells = 73;\n  let colorPointD = \"transparent\";\n  let colorPointR = \"transparent\"; \n  let circleSize = 10;\n\n  const horizontalScale = scaleLinear()\n    .domain([110, 0])\n    .range([\n      137,\n      xPositionFirstIntGrid + offsetGridCell + numHCells * xPixelsBetweenCells\n    ]);\n\n  const verticalScale = scaleLinear()\n    .domain([1890, 1790])\n    .range([0, numVCells * yPixelsBetweenCells]);\n\n  function yPos(i, offset = 0) {\n    return offset + i * yPixelsBetweenCells;\n  }\n\n  function xPos(i, offset = 0) {\n    return xPositionFirstIntGrid + i * xPixelsBetweenCells + offset;\n  }\n\n  function doSomething(index, type) {\n    if (type === \"dashed\") {\n      colorPointD = \"black\";\n    } else if (type === \"regular\") {\n      colorPointD = \"black\";\n    } else {\n      console.log(\"Do something doesn't found a known type\");\n    }\n  }\n\n  function doNothing() {\n    colorPointD = \"transparent\";\n    colorPointR = \"transparent\";\n  }\n\n  function assginInd(index) {\n    activeIndex = index;\n  }\n</script>\n\n\n<div class=\"page\">\n  <div class=\"headerContainer\">\n    <h1>\n      COMPARATIVE INCREASE OF WHITE AND COLORED POPULATION OF GEORGIA.\n    </h1>\n  \n  </div>\n  <div class=\"graph\">\n    <!-- main chart -->\n    <svg id=\"chart\" xmlns=\"http://www.w3.org/2000/svg\" width=\"800\" height=\"1000\">\n      <!--Horizontal Grid-->\n      {#each Array(numHCells) as _, i}\n        <g class=\"intGrid\">\n          <path d={\"M \" + xPos(i+1, offsetGridCell) +\" \"+ yPos(0) + \" V \" + yPos(numVCells)}/>\n        </g>\n          \n      {/each}\n\n      <!--Horizontal Grid-->\n      {#each dataDashedL.slice(0,dataDashedL.length-2) as item, i}\n        <g class=\"intGrid\" height={(numVCells-6)*yPixelsBetweenCells}>\n            <path d={\"M \" + xPos(0, offsetGridCell) + \" \" + yPos(i+1) +\" H \" + xPos(numHCells, offsetGridCell)}/>\n        </g>\n      {/each}\n      \n      \n      <g class=\"extGrid\">\n                <path d=\"M 188 0 H 668 M 188 0 V 730 M 188 730 H 668 M 668 0 V 730\" />\n      </g>\n\n\n      <!-- Percent labels on the x-axis-->\n      {#each Array(numHCells+1) as _, i}\n        <text class=\"label\" x = {horizontalScale(i*5)} y={yPos(numVCells, 12)} text-anchor=\"middle\" >\n          {i*5}\n        </text>\n          \n      {/each}\n\n      \n\n\n\n    <!--Years of the y-axis and dashed line-->\n    {#each dataDashedL as item, i}\n      <text x = {xPos(0)} y = {yPos(i,12)} class = 'years'>\n        {item.year}\n      </text>\n      {#if i < dataDashedL.length-1}\n        <g class=\"dashedLine\">\n          <path d={\"M \" + \" \" + horizontalScale(item.percent) + \" \" \n          + verticalScale(item.year) + \" L \" \n          + horizontalScale(dataDashedL[i+1].percent) + \" \" \n          + verticalScale(dataDashedL[i+1].year)}\n          />\n        \n      \n          \n        </g>\n        \n        <CircleElement xPos={horizontalScale(item.percent)} yPos={verticalScale(item.year)} {circleSize}\n          active = {i == activeIndex} value = {item.percent}\n          on:mouseover={() => {assginInd(i)} } on:mouseout={() => assginInd(-1)}/>\n      {/if}\n    {/each}\n    <circle fill={colorPointD} cx={horizontalScale(dataDashedL[dataDashedL.length-1].percent)} cy={verticalScale(dataDashedL[dataDashedL.length-1].year)} r=10> </circle>\n\n\n    <!--regular Line-->\n    {#each dataRegularL.slice(0, dataRegularL.length-1) as item, i}\n      <g class=\"regularLine\">\n          <path d={\"M \" + \" \" + horizontalScale(item.percent) + \" \" \n          + verticalScale(item.year) + \" L \" \n          + horizontalScale(dataRegularL[i+1].percent) + \" \" \n          + verticalScale(dataRegularL[i+1].year)}/>\n      </g>\n\n      <CircleElement xPos={horizontalScale(item.percent)} yPos={verticalScale(item.year)} {circleSize}\n          active = {i == activeIndex} value = {item.percent}\n          on:mouseover={() => {assginInd(i)} } on:mouseout={() => assginInd(-1)}/>\n    {/each}\n    <!--There is no need to implement it on 1790 since it is the reference-->\n      \n\n\n    \n    <!--Legend-->\n    <g>\n      <text class = \"label\" x=\"235\" y=\"805\" dominant-baseline=\"hanging\"> = COLORED </text>\n      <path class = \"regularLine\" d=\"M 175 810 H 230\">\n    </g>\n    <g>\n      <text class = \"label\" x=\"550\" y=\"805\" dominant-baseline=\"hanging\">WHITE =</text>\n      <path class = \"dashedLine\" d=\"M 605 810 H 675\">\n    </g>\n\n\n    <!-- curvy bracket-->\n    <g fill=\"transparent\" stroke=\"black\">\n      <path d=\"M 175 740 Q 175 755 200 753 M 200 753 H 377 M 377 753 Q 402 753 405 790 M 405 790\n                Q 405 753 430 753 M 430 753 H 665 M 665 753 Q 680 753 680 740\">\n    </g>\n\n\n  </div>\n</div>\n\n<style>\n  .page {\n    background-color: rgb(250, 239, 233);\n    width: 814px;\n    height: 1024px;\n  }\n\n  h1,\n  .extGrid {\n    font-family: \"Earth\", sans-serif;\n    color: rgb(40, 40, 40);\n    stroke: rgb(40, 40, 40);\n    stroke-width: 0.75px;\n  }\n\n  .intGrid {\n    stroke: rgb(275, 120, 120);\n    stroke-width: 1px;\n  }\n\n  .label {\n    font-size: 12px;\n    font-weight: 10;\n  }\n  text {\n    font-weight: 10;\n    font-size: 12px;\n    font-family: sans-serif;\n  }\n\n  .years {\n    font-weight: 10;\n    font-size: 18px;\n    text-anchor: end;\n  }\n\n  h1 {\n    font-weight: 200;\n    font-size: 25px;\n    line-height: 20px;\n    text-align: center;\n  }\n\n  .dashedLine,\n  .regularLine {\n    stroke: black;\n    stroke-width: 1.5px;\n  }\n\n  .dashedLine {\n    stroke-dasharray: 10px;\n  }\n\n  .headerContainer {\n    padding-left: 60px;\n    padding-right: 60px;\n    padding-top: 15px;\n    padding-bottom: 30px;\n  }\n</style>"
  ],
  "names": [],
  "mappings": "AAoKE,KAAK,cAAC,CAAC,AACL,gBAAgB,CAAE,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CACpC,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,MAAM,AAChB,CAAC,AAED,gBAAE,CACF,QAAQ,cAAC,CAAC,AACR,WAAW,CAAE,OAAO,CAAC,CAAC,UAAU,CAChC,KAAK,CAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CACtB,MAAM,CAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CACvB,YAAY,CAAE,MAAM,AACtB,CAAC,AAED,QAAQ,cAAC,CAAC,AACR,MAAM,CAAE,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAC1B,YAAY,CAAE,GAAG,AACnB,CAAC,AAED,MAAM,cAAC,CAAC,AACN,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,EAAE,AACjB,CAAC,AACD,IAAI,cAAC,CAAC,AACJ,WAAW,CAAE,EAAE,CACf,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,UAAU,AACzB,CAAC,AAED,MAAM,cAAC,CAAC,AACN,WAAW,CAAE,EAAE,CACf,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,GAAG,AAClB,CAAC,AAED,EAAE,cAAC,CAAC,AACF,WAAW,CAAE,GAAG,CAChB,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,IAAI,CACjB,UAAU,CAAE,MAAM,AACpB,CAAC,AAED,yBAAW,CACX,YAAY,cAAC,CAAC,AACZ,MAAM,CAAE,KAAK,CACb,YAAY,CAAE,KAAK,AACrB,CAAC,AAED,WAAW,cAAC,CAAC,AACX,gBAAgB,CAAE,IAAI,AACxB,CAAC,AAED,gBAAgB,cAAC,CAAC,AAChB,YAAY,CAAE,IAAI,CAClB,aAAa,CAAE,IAAI,CACnB,WAAW,CAAE,IAAI,CACjB,cAAc,CAAE,IAAI,AACtB,CAAC"
}